services:
  auth-service:
    image: ghcr.io/fakesib/auth-service
    container_name: auth-service
    environment:
      JWT_TOKEN: ${SERVICE_JWT_TOKEN}
    depends_on:
      - gateway-service
      - redis
      - service-discovery
    networks:
      - app-network

  mail-service:
    image: ghcr.io/fakesib/mail-service
    container_name: mail-service
    environment:
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
    depends_on:
      - gateway-service
      - redis
      - kafka
      - service-discovery
    networks:
      - app-network

  database-service:
    image: ghcr.io/fakesib/database-service
    container_name: database-service
    environment:
      DB_HOST: postgres-service
      DB_PORT: 5432
      DB_NAME: mikhailpoizon_docker
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      JWT_TOKEN: ${SECRET_JWT_TOKEN}
    depends_on:
      postgres-service:
        condition: service_healthy
      service-discovery:
        condition: service_started
    networks:
      - app-network

  gateway-service:
    image: ghcr.io/fakesib/gateway-service
    container_name: gateway-service
    depends_on:
      service-discovery:
        condition: service_healthy
    networks:
      - app-network

  profile-service:
    image: ghcr.io/fakesib/profile-service
    container_name: profile-service
    environment:
      JWT_TOKEN: ${SERVICE_JWT_TOKEN}
    depends_on:
      - gateway-service
      - redis
      - kafka
      - service-discovery
    networks:
      - app-network

  feed-service:
    image: ghcr.io/fakesib/feed-service
    container_name: feed-service
    environment:
      JWT_TOKEN: ${SERVICE_JWT_TOKEN}
    depends_on:
      - gateway-service
      - redis
      - service-discovery
    networks:
      - app-network

  service-discovery:
    image: ghcr.io/fakesib/service-discovery
    container_name: service-discovery
    ports:
      - "8671:8761"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/eureka/apps" ]
      interval: 5s
      retries: 12

  postgres-service:
    image: postgres:16.0
    container_name: postgres-service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mikhailpoizon_docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mikhailpoizon_docker"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      ["db-data:/var/lib/postgresql/data"]
    ports:
      - "5432"
    networks:
      - app-network

  redis:
    image: redis:8.2.0
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    depends_on:
      - gateway-service
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    depends_on:
      - nginx
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    command: certonly --webroot -w /var/www/certbot -d ${DOMAIN} --email ${EMAIL} --agree-tos

  kafka:
    image: apache/kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      CLUSTER_ID: "JIcGQmeiTPej55_9jGMUiw"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - app-network

volumes:
  db-data:

networks:
  app-network:
    driver: bridge